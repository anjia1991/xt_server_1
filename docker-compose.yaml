services:
  traefik:
    image: traefik:v3.1
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.file.directory=/etc/traefik/dynamic  # Correct directory for dynamic config
      - --providers.file.watch=true  # Watch for changes in dynamic config
      - --entrypoints.web.address=:8081
      - --entrypoints.websecure.address=:8443
      - --entrypoints.traefik.address=:8080
      - --entrypoints.websecure.http.tls=true
      - --providers.file.filename=/etc/traefik/traefik.yml  # External configuration for TLS certificates
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik_dashboard.rule=Host(`localhost`)"
      - "traefik.http.routers.traefik_dashboard.service=api@internal"
      - "traefik.http.routers.traefik_dashboard.entrypoints=traefik"
    ports:
      - "8081:8081"  # HTTP
      - "8443:8443"  # HTTPS
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker socket to detect running containers
      - ./data/localhost.pem:/certs/localhost.pem  # Mount your certificate file
      - ./data/localhost-key.pem:/certs/localhost-key.pem  # Mount your key file
      - ./data/traefik.yml:/etc/traefik/traefik.yml  # Static configuration for TLS certificates
      - ./data/dynamic:/etc/traefik/dynamic  # Mount the dynamic directory with configuration files
      - ./data/logs:/var/log/traefik  # Mount the log directory
    restart: unless-stopped  # Automatically restart unless stopped

  adminjs:
    build: .
    container_name: adminjs-container
    ports:
      - "5000:5000" # Backend port
    environment:
      DATABASE_URL: mysql://root:adminjs@mysql:3306/adminjs
      DATABASE_DIALECT: mysql
      DATABASE_NAME: adminjs
      DATABASE_HOST: mysql
      DATABASE_USER: root
      DATABASE_PASSWORD: root
      COOKIE_SECRET: QmutO5X71dgE4p8GiU57YAxMCb6f6vm9
      SESSION_SECRET: 6f8e023b1f1a4b32a915aa7f6725f3d1
      ORIGIN: https://localhost:8443
      RP_NAME: exertime_application
      RP_ID: localhost
      TIMEOUT_MS: 60000
      COOKIE_MAX_AGE: 86400000
      JWT_SECRET: 9a0b0cc4b03b47c9a1c8c16f7a0569a6
      JWT_EXPIRATION: 1h
      FRONTEND_ORIGIN: https://localhost:8443
    labels:
      - "traefik.enable=true"

      # HTTP Router
      - "traefik.http.routers.adminjs.rule=Host(`localhost`)"
      - "traefik.http.services.adminjs.loadbalancer.server.port=5000" # Single service for HTTP

      # HTTPS Router (reusing the same service)
      - "traefik.http.routers.adminjs-secure.rule=Host(`localhost`)"
      - "traefik.http.routers.adminjs-secure.entrypoints=websecure"
      - "traefik.http.routers.adminjs-secure.tls=true"
      - "traefik.http.services.adminjs.loadbalancer.server.port=5000" # Use the same service for HTTPS

      # API Router (also reuse the same service)
      - "traefik.http.routers.adminjs-api.rule=Host(`localhost`) && PathPrefix(`/admin/api/webauthn`)"
      - "traefik.http.routers.adminjs-api.entrypoints=websecure"
      - "traefik.http.routers.adminjs-api.tls=true"
      - "traefik.http.services.adminjs.loadbalancer.server.port=5000" # Reuse the same service for API requests

      - "traefik.http.middlewares.adminjs-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./data/wait-for-mysql.sh:/wait-for-mysql.sh
    entrypoint: [ "sh", "/wait-for-mysql.sh" ]

  mysql:
    image: mysql:latest
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: adminjs
    ports:
      - "3306:3306"
    command: [ "sh", "/docker-entrypoint-initdb.d/mysql-init.sh" ]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
    volumes:
      - db_data:/var/lib/mysql
      - ./data/adminjs.sql:/docker-entrypoint-initdb.d/adminjs.sql
      - ./data/mysql-init.sh:/docker-entrypoint-initdb.d/mysql-init.sh
      - ./data/mysql-general-log.log:/tmp/mysql-general-log.log


volumes:
  db_data:
